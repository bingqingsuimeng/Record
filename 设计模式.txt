Abstract Factory模式
适用性：
	1、一个系统要独立于它的产品的创建、组合和表示时。
	2、一个系统要由多个产品系列中的一个来配置时。
	3、当你要强调一系列相关的产品对象的设计以便进行联合使用时。
	4、当你提供一个产品类库，而只想显示它们的接口而不是实现时。
一个迷宫虚工厂类；多个迷宫具体工厂类，对应多个地图。
一个虚产品类声明一套接口，不同具体的工厂类重定义。	

Builder模式
适用性:
	1、当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。
	2、当构造过程必须允许被构造的对象有不同的表示时。
一个地图分析类，一个虚创建类提供创建各个道具的抽象接口，各个具体创建类对相同的道具提供不同的外观

相关模式对比：	
Abstract Factory 与 Builder 相似，因为它也可以创建复杂对象。主要的区别是
Builder 模式着重于一步步构造一个复杂对象。而 Abstract Factory着重于多个系列的产品对象
（简单的或是复杂的） 。Builder在最后的一步返回产品，而对于 Abstract Factory来说，产品是
立即返回的。

Factory Method模式
适用性：
1、当一个类不知道它所必须创建的对象的类的时候。
2、当一个类希望由它的子类来指定它所创建的对象的时候。
3、当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类
是代理者这一信息局部化的时候。

